from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types, F
from icecream import ic
import asyncio
import os
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
from aiogram.fsm.storage.memory import MemoryStorage

# user_id_v = '1585564954'
TOKEN = "7943153137:AAGcnE-QLPr7Ltc6_O8ZCHcu57Jt0YHpjxA"
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
user_id = 5060772866
# ‚úÖ –£–∫–∞–∂–µ–º —Ç–æ—á–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "my_employees.db")

@dp.message(F.text == '/start')
async def start(message: types.Message):
    await send_main_menu(message)

async def send_main_menu(target):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='admin')],
            [InlineKeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è A', callback_data='cat_1')],
            [InlineKeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è B', callback_data='cat_2')],
            [InlineKeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è C', callback_data='cat_3')],
            [InlineKeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è D', callback_data='cat_4')],
            [InlineKeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è E', callback_data='cat_5')],
            [InlineKeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è F', callback_data='cat_6')],
            [InlineKeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è G', callback_data='cat_7')],
        ]
    )
    await target.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –≥–æ–ª–æ–≤–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ "–°–≤. –ú–∞—Ä–∏—è"')
    await target.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=markup)


# üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î
def init_db():
    conn = sqlite3.connect("my_employees.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Employees (
            employee_id INTEGER PRIMARY KEY AUTOINCREMENT,
            first_name TEXT NOT NULL,
            last_name TEXT NOT NULL,
            position TEXT NOT NULL,
            phone_number TEXT
        )
    ''')
    conn.commit()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='Employees'")
    table_exists = cursor.fetchone()
    print("–¢–∞–±–ª–∏—Ü–∞ Employees —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", bool(table_exists))


# üì¶ –°–û–°–¢–û–Ø–ù–ò–Ø FSM
class AddEmployeeStates(StatesGroup):
    first_name = State()
    last_name = State()
    position = State()
    phone_number = State()
    confirm = State()

class RemoveEmployeeStates(StatesGroup):
    waiting_for_id = State()

# üìã –ü–û–ö–ê–ó–ê–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–û–í
@dp.callback_query(F.data == 'admin')
async def show_employees(callback: types.CallbackQuery):
    conn = sqlite3.connect("my_employees.db")
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT employee_id, first_name, last_name, position, phone_number FROM Employees')
        employees = cursor.fetchall()
    except sqlite3.Error as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer()
        return
    finally:
        conn.close()

    if employees:
        text = "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        for emp in employees:
            emp_id, first_name, last_name, position, phone_number = emp
            text += (
                f"ID: {emp_id}\n"
                f"–ò–º—è: {first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
            )
    else:
        text = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    await callback.message.answer(text)

    if callback.from_user.id == user_id:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_employee')],
            [InlineKeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å', callback_data='remove_employee')]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", reply_markup=markup)
    else:
        await callback.message.answer('‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.')

    await callback.answer()

# ‚ûï –î–û–ë–ê–í–ò–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–ê (FSM)
@dp.callback_query(F.data == 'add_employee')
async def start_add(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:')
    await state.set_state(AddEmployeeStates.first_name)
    await callback.answer()

@dp.message(AddEmployeeStates.first_name)
async def get_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    await state.set_state(AddEmployeeStates.last_name)

@dp.message(AddEmployeeStates.last_name)
async def get_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    await state.set_state(AddEmployeeStates.position)

@dp.message(AddEmployeeStates.position)
async def get_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(AddEmployeeStates.phone_number)

@dp.message(AddEmployeeStates.phone_number)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    data = await state.get_data()

    confirm_text = (
        f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?\n\n"
        f"üë§ –ò–º—è: {data['first_name']}\n"
        f"üë§ –§–∞–º–∏–ª–∏—è: {data['last_name']}\n"
        f"üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['position']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ **–¥–∞** –∏–ª–∏ **–Ω–µ—Ç**."
    )
    await message.answer(confirm_text)
    await state.set_state(AddEmployeeStates.confirm)

@dp.message(AddEmployeeStates.confirm)
async def confirm_employee(message: types.Message, state: FSMContext):
    menu_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]]
    )

    if message.text.lower() == "–¥–∞":
        data = await state.get_data()

        conn = sqlite3.connect("my_employees.db")
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO Employees (first_name, last_name, position, phone_number)
            VALUES (?, ?, ?, ?)
        ''', (
            data['first_name'],
            data['last_name'],
            data['position'],
            data['phone_number']
        ))
        conn.commit()
        conn.close()

        await message.answer("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.", reply_markup=menu_markup)
    else:
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_markup)

    await state.clear()

# ‚ùå –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê
@dp.callback_query(F.data == 'remove_employee')
async def ask_for_employee_id(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != user_id:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]]
        )
        await callback.message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.", reply_markup=markup)
        await callback.answer()
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(RemoveEmployeeStates.waiting_for_id)
    await callback.answer()

@dp.message(RemoveEmployeeStates.waiting_for_id)
async def process_employee_id_for_deletion(message: types.Message, state: FSMContext):
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é-–∫–Ω–æ–ø–∫–∞
    menu_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]]
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if message.from_user.id != user_id:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=menu_markup)
        await state.clear()
        return

    emp_id_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥—ë–Ω ID ‚Äî —á–∏—Å–ª–æ
    if not emp_id_text.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", reply_markup=menu_markup)
        return

    emp_id = int(emp_id_text)

    # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π
    try:
        conn = sqlite3.connect("my_employees.db")
        cursor = conn.cursor()

        print(f"–ò—â—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å ID = {emp_id}")
        cursor.execute("SELECT * FROM Employees WHERE employee_id = ?", (emp_id,))
        employee = cursor.fetchone()
        print("–ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:", employee)

        if not employee:
            await message.answer(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {emp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu_markup)
        else:
            cursor.execute("DELETE FROM Employees WHERE employee_id = ?", (emp_id,))
            conn.commit()
            await message.answer(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {emp_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=menu_markup)

    except sqlite3.Error as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=menu_markup)
    finally:
        conn.close()

    await state.clear()

# üîÅ –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ
@dp.callback_query(F.data == 'menu')
async def return_to_main_menu(callback: types.CallbackQuery):
    await callback.message.delete()  # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await send_main_menu(callback.message)
    await callback.answer()

# üë§ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞
class AddChildStates(StatesGroup):
    first_name = State()
    last_name = State()
    parents = State()
    phone_number = State()
    phone_number_parents = State()

# üë§ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞
class RemoveChildStates(StatesGroup):
    waiting_for_id = State()

# üîß –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã (–æ–¥–∏–Ω —Ä–∞–∑, –ª—É—á—à–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞)
def init_db_backup():
    with sqlite3.connect("my_children.db") as conn:
        cursor = conn.cursor()  # –í–æ—Ç —Ç—É—Ç —Å–æ–∑–¥–∞—ë–º –∫—É—Ä—Å–æ—Ä!
        cursor.execute(''' 
            CREATE TABLE IF NOT EXISTS children (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                first_name TEXT,
                last_name TEXT,
                parents TEXT,
                phone_number TEXT,
                phone_number_parents TEXT
            )
        ''')

# üö© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–µ—Ç–∏)
@dp.callback_query(F.data.startswith('cat'))
async def show_category(callback: types.CallbackQuery):
    category = callback.data.split("_")[1]

    if callback.from_user.id == user_id:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞', callback_data='add_child')],
                [InlineKeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞', callback_data='remove_child')]
            ]
        )
        await callback.message.answer(f'üîê –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}: —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)
    else:
        await callback.message.answer(f"üìÅ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}. –î–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # üëá –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π
    with sqlite3.connect("my_children.db") as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id, first_name, last_name, parents, phone_number, phone_number_parents FROM children')
        children = cursor.fetchall()

    if children:
        text = "üìã –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π:\n"
        for i, child in enumerate(children):
            id_,first_name, last_name, parents, phone, phone_parent = child
            text += f"{id_}.\n–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\n–†–æ–¥–∏—Ç–µ–ª—å: {parents}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {phone_parent}\n\n"
    else:
        text = "‚ùó –î–µ—Ç–∏ –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    await callback.message.answer(text)
    await callback.answer()


# ‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞
@dp.callback_query(F.data == "add_child")
async def start_add_child(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != user_id:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ—Ç–µ–π.", show_alert=True)
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(AddChildStates.first_name)


# ‚ûï –®–∞–≥–∏ FSM
@dp.message(AddChildStates.first_name)
async def child_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(AddChildStates.last_name)


@dp.message(AddChildStates.last_name)
async def child_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è:")
    await state.set_state(AddChildStates.parents)


@dp.message(AddChildStates.parents)
async def child_parents(message: types.Message, state: FSMContext):
    await state.update_data(parents=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(AddChildStates.phone_number)


@dp.message(AddChildStates.phone_number)
async def child_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è:")
    await state.set_state(AddChildStates.phone_number_parents)


@dp.message(AddChildStates.phone_number_parents)
async def save_child_to_db(message: types.Message, state: FSMContext):
    await state.update_data(phone_number_parents=message.text.strip())
    data = await state.get_data()

    with sqlite3.connect("my_children.db") as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO children (first_name, last_name, parents, phone_number, phone_number_parents)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            data['first_name'],
            data['last_name'],
            data['parents'],
            data['phone_number'],
            data['phone_number_parents']
        ))
        conn.commit()

    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
        ]
    )

    await message.answer("‚úÖ –†–µ–±—ë–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=markup)
    await state.clear()

@dp.callback_query(F.data == 'menu')
async def return_to_main_menu(callback: types.CallbackQuery):
    await callback.message.delete()  # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await send_main_menu(callback.message)
    await callback.answer()

@dp.callback_query(F.data == 'remove_child')
async def ask_for_child_id(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != user_id:
        await callback.message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –¥–µ—Ç–µ–π.")
        await callback.answer()
        return

    await callback.message.answer("–ö–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–±—ë–Ω–∫–∞ (ID):")
    await state.set_state(RemoveChildStates.waiting_for_id)
    await callback.answer()

@dp.message(RemoveChildStates.waiting_for_id)
async def process_child_id_for_deletion(message: types.Message, state: FSMContext):
    menu_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]]
    )

    if message.from_user.id != user_id:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=menu_markup)
        await state.clear()
        return

    child_id_text = message.text.strip()

    if not child_id_text.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID —Ä–µ–±—ë–Ω–∫–∞.", reply_markup=menu_markup)
        return

    child_id = int(child_id_text)

    conn = sqlite3.connect("my_children.db")
    cursor = conn.cursor()

    try:
        print(f"–ò—â—É —Ä–µ–±–µ–Ω–∫–∞ —Å ID = {child_id}")
        cursor.execute("SELECT * FROM children WHERE id = ?", (child_id,))
        child = cursor.fetchone()
        print("–ù–∞–π–¥–µ–Ω —Ä–µ–±–µ–Ω–æ–∫:", child)

        if not child:
            await message.answer(f"‚ùå –†–µ–±—ë–Ω–æ–∫ —Å ID {child_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu_markup)
        else:
            cursor.execute("DELETE FROM children WHERE id = ?", (child_id,))
            conn.commit()
            await message.answer(f"‚úÖ –†–µ–±—ë–Ω–æ–∫ —Å ID {child_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=menu_markup)
    except sqlite3.Error as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=menu_markup)
    finally:
        conn.close()

    await state.clear()


@dp.callback_query(F.data == 'menu')
async def return_to_main_menu(callback: types.CallbackQuery):
    await callback.message.delete()  # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await send_main_menu(callback.message)
    await callback.answer()

async def main():
    init_db()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    init_db_backup()
    ic("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())